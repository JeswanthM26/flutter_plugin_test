// Mocks generated by Mockito 5.4.6 from annotations
// in apz_pdf_viewer/test/apz_pdf_viewer_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:ui' as _i4;

import 'package:apz_pdf_viewer/src/apz_pdf_controller.dart' as _i6;
import 'package:flutter/foundation.dart' as _i3;
import 'package:flutter/gestures.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:pdfrx/pdfrx.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePdfViewerController_0 extends _i1.SmartFake
    implements _i2.PdfViewerController {
  _FakePdfViewerController_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePdfViewer_1 extends _i1.SmartFake implements _i2.PdfViewer {
  _FakePdfViewer_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakePdfViewerParams_2 extends _i1.SmartFake
    implements _i2.PdfViewerParams {
  _FakePdfViewerParams_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSize_3 extends _i1.SmartFake implements _i4.Size {
  _FakeSize_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePdfPageLayout_4 extends _i1.SmartFake implements _i2.PdfPageLayout {
  _FakePdfPageLayout_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRect_5 extends _i1.SmartFake implements _i4.Rect {
  _FakeRect_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePdfDocument_6 extends _i1.SmartFake implements _i2.PdfDocument {
  _FakePdfDocument_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePdfDocumentRef_7 extends _i1.SmartFake
    implements _i2.PdfDocumentRef {
  _FakePdfDocumentRef_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMatrix4_8 extends _i1.SmartFake implements _i5.Matrix4 {
  _FakeMatrix4_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeOffset_9 extends _i1.SmartFake implements _i4.Offset {
  _FakeOffset_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ApzPdfViewerController].
///
/// See the documentation for Mockito's code generation for more information.
class MockApzPdfViewerController extends _i1.Mock
    implements _i6.ApzPdfViewerController {
  MockApzPdfViewerController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PdfViewerController get pdfController =>
      (super.noSuchMethod(
            Invocation.getter(#pdfController),
            returnValue: _FakePdfViewerController_0(
              this,
              Invocation.getter(#pdfController),
            ),
          )
          as _i2.PdfViewerController);

  @override
  _i7.Future<void> zoomUp({bool? loop = false}) =>
      (super.noSuchMethod(
            Invocation.method(#zoomUp, [], {#loop: loop}),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> resetZoom() =>
      (super.noSuchMethod(
            Invocation.method(#resetZoom, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);
}

/// A class which mocks [PdfViewerController].
///
/// See the documentation for Mockito's code generation for more information.
class MockPdfViewerController extends _i1.Mock
    implements _i2.PdfViewerController {
  MockPdfViewerController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PdfViewer get widget =>
      (super.noSuchMethod(
            Invocation.getter(#widget),
            returnValue: _FakePdfViewer_1(this, Invocation.getter(#widget)),
          )
          as _i2.PdfViewer);

  @override
  _i2.PdfViewerParams get params =>
      (super.noSuchMethod(
            Invocation.getter(#params),
            returnValue: _FakePdfViewerParams_2(
              this,
              Invocation.getter(#params),
            ),
          )
          as _i2.PdfViewerParams);

  @override
  bool get isReady =>
      (super.noSuchMethod(Invocation.getter(#isReady), returnValue: false)
          as bool);

  @override
  _i4.Size get documentSize =>
      (super.noSuchMethod(
            Invocation.getter(#documentSize),
            returnValue: _FakeSize_3(this, Invocation.getter(#documentSize)),
          )
          as _i4.Size);

  @override
  _i2.PdfPageLayout get layout =>
      (super.noSuchMethod(
            Invocation.getter(#layout),
            returnValue: _FakePdfPageLayout_4(this, Invocation.getter(#layout)),
          )
          as _i2.PdfPageLayout);

  @override
  _i4.Size get viewSize =>
      (super.noSuchMethod(
            Invocation.getter(#viewSize),
            returnValue: _FakeSize_3(this, Invocation.getter(#viewSize)),
          )
          as _i4.Size);

  @override
  double get coverScale =>
      (super.noSuchMethod(Invocation.getter(#coverScale), returnValue: 0.0)
          as double);

  @override
  double get minScale =>
      (super.noSuchMethod(Invocation.getter(#minScale), returnValue: 0.0)
          as double);

  @override
  _i4.Rect get visibleRect =>
      (super.noSuchMethod(
            Invocation.getter(#visibleRect),
            returnValue: _FakeRect_5(this, Invocation.getter(#visibleRect)),
          )
          as _i4.Rect);

  @override
  _i2.PdfDocument get document =>
      (super.noSuchMethod(
            Invocation.getter(#document),
            returnValue: _FakePdfDocument_6(this, Invocation.getter(#document)),
          )
          as _i2.PdfDocument);

  @override
  List<_i2.PdfPage> get pages =>
      (super.noSuchMethod(
            Invocation.getter(#pages),
            returnValue: <_i2.PdfPage>[],
          )
          as List<_i2.PdfPage>);

  @override
  int get pageCount =>
      (super.noSuchMethod(Invocation.getter(#pageCount), returnValue: 0)
          as int);

  @override
  _i2.PdfDocumentRef get documentRef =>
      (super.noSuchMethod(
            Invocation.getter(#documentRef),
            returnValue: _FakePdfDocumentRef_7(
              this,
              Invocation.getter(#documentRef),
            ),
          )
          as _i2.PdfDocumentRef);

  @override
  _i5.Matrix4 get value =>
      (super.noSuchMethod(
            Invocation.getter(#value),
            returnValue: _FakeMatrix4_8(this, Invocation.getter(#value)),
          )
          as _i5.Matrix4);

  @override
  _i4.Offset get centerPosition =>
      (super.noSuchMethod(
            Invocation.getter(#centerPosition),
            returnValue: _FakeOffset_9(
              this,
              Invocation.getter(#centerPosition),
            ),
          )
          as _i4.Offset);

  @override
  double get currentZoom =>
      (super.noSuchMethod(Invocation.getter(#currentZoom), returnValue: 0.0)
          as double);

  @override
  set value(_i5.Matrix4? newValue) => super.noSuchMethod(
    Invocation.setter(#value, newValue),
    returnValueForMissingStub: null,
  );

  @override
  _i7.FutureOr<T?> useDocument<T>(
    _i7.FutureOr<T> Function(_i2.PdfDocument)? task, {
    bool? ensureLoaded = true,
    _i7.Completer<dynamic>? cancelLoading,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #useDocument,
              [task],
              {#ensureLoaded: ensureLoaded, #cancelLoading: cancelLoading},
            ),
          )
          as _i7.FutureOr<T?>);

  @override
  void addListener(_i4.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i4.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Matrix4 makeMatrixInSafeRange(_i5.Matrix4? newValue) =>
      (super.noSuchMethod(
            Invocation.method(#makeMatrixInSafeRange, [newValue]),
            returnValue: _FakeMatrix4_8(
              this,
              Invocation.method(#makeMatrixInSafeRange, [newValue]),
            ),
          )
          as _i5.Matrix4);

  @override
  double getNextZoom({bool? loop = true}) =>
      (super.noSuchMethod(
            Invocation.method(#getNextZoom, [], {#loop: loop}),
            returnValue: 0.0,
          )
          as double);

  @override
  double getPreviousZoom({bool? loop = true}) =>
      (super.noSuchMethod(
            Invocation.method(#getPreviousZoom, [], {#loop: loop}),
            returnValue: 0.0,
          )
          as double);

  @override
  void notifyFirstChange(void Function()? onFirstChange) => super.noSuchMethod(
    Invocation.method(#notifyFirstChange, [onFirstChange]),
    returnValueForMissingStub: null,
  );

  @override
  _i7.Future<void> goToArea({
    required _i4.Rect? rect,
    _i2.PdfPageAnchor? anchor,
    Duration? duration = const Duration(milliseconds: 200),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#goToArea, [], {
              #rect: rect,
              #anchor: anchor,
              #duration: duration,
            }),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> goToPage({
    required int? pageNumber,
    _i2.PdfPageAnchor? anchor,
    Duration? duration = const Duration(milliseconds: 200),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#goToPage, [], {
              #pageNumber: pageNumber,
              #anchor: anchor,
              #duration: duration,
            }),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> goToRectInsidePage({
    required int? pageNumber,
    required _i2.PdfRect? rect,
    _i2.PdfPageAnchor? anchor,
    Duration? duration = const Duration(milliseconds: 200),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#goToRectInsidePage, [], {
              #pageNumber: pageNumber,
              #rect: rect,
              #anchor: anchor,
              #duration: duration,
            }),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i4.Rect calcRectForRectInsidePage({
    required int? pageNumber,
    required _i2.PdfRect? rect,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#calcRectForRectInsidePage, [], {
              #pageNumber: pageNumber,
              #rect: rect,
            }),
            returnValue: _FakeRect_5(
              this,
              Invocation.method(#calcRectForRectInsidePage, [], {
                #pageNumber: pageNumber,
                #rect: rect,
              }),
            ),
          )
          as _i4.Rect);

  @override
  _i5.Matrix4 calcMatrixForRectInsidePage({
    required int? pageNumber,
    required _i2.PdfRect? rect,
    _i2.PdfPageAnchor? anchor,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#calcMatrixForRectInsidePage, [], {
              #pageNumber: pageNumber,
              #rect: rect,
              #anchor: anchor,
            }),
            returnValue: _FakeMatrix4_8(
              this,
              Invocation.method(#calcMatrixForRectInsidePage, [], {
                #pageNumber: pageNumber,
                #rect: rect,
                #anchor: anchor,
              }),
            ),
          )
          as _i5.Matrix4);

  @override
  _i7.Future<bool> goToDest(
    _i2.PdfDest? dest, {
    Duration? duration = const Duration(milliseconds: 200),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#goToDest, [dest], {#duration: duration}),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i5.Matrix4? calcMatrixForFit({required int? pageNumber}) =>
      (super.noSuchMethod(
            Invocation.method(#calcMatrixForFit, [], {#pageNumber: pageNumber}),
          )
          as _i5.Matrix4?);

  @override
  _i5.Matrix4? calcMatrixFitWidthForPage({required int? pageNumber}) =>
      (super.noSuchMethod(
            Invocation.method(#calcMatrixFitWidthForPage, [], {
              #pageNumber: pageNumber,
            }),
          )
          as _i5.Matrix4?);

  @override
  _i5.Matrix4? calcMatrixFitHeightForPage({required int? pageNumber}) =>
      (super.noSuchMethod(
            Invocation.method(#calcMatrixFitHeightForPage, [], {
              #pageNumber: pageNumber,
            }),
          )
          as _i5.Matrix4?);

  @override
  List<_i2.PdfPageFitInfo> calcFitZoomMatrices({
    bool? sortInSuitableOrder = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#calcFitZoomMatrices, [], {
              #sortInSuitableOrder: sortInSuitableOrder,
            }),
            returnValue: <_i2.PdfPageFitInfo>[],
          )
          as List<_i2.PdfPageFitInfo>);

  @override
  _i5.Matrix4 calcMatrixForPage({
    required int? pageNumber,
    _i2.PdfPageAnchor? anchor,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#calcMatrixForPage, [], {
              #pageNumber: pageNumber,
              #anchor: anchor,
            }),
            returnValue: _FakeMatrix4_8(
              this,
              Invocation.method(#calcMatrixForPage, [], {
                #pageNumber: pageNumber,
                #anchor: anchor,
              }),
            ),
          )
          as _i5.Matrix4);

  @override
  _i5.Matrix4 calcMatrixForArea({
    required _i4.Rect? rect,
    _i2.PdfPageAnchor? anchor,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#calcMatrixForArea, [], {
              #rect: rect,
              #anchor: anchor,
            }),
            returnValue: _FakeMatrix4_8(
              this,
              Invocation.method(#calcMatrixForArea, [], {
                #rect: rect,
                #anchor: anchor,
              }),
            ),
          )
          as _i5.Matrix4);

  @override
  _i7.Future<void> goTo(
    _i5.Matrix4? destination, {
    Duration? duration = const Duration(milliseconds: 200),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#goTo, [destination], {#duration: duration}),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> ensureVisible(
    _i4.Rect? rect, {
    Duration? duration = const Duration(milliseconds: 200),
    double? margin = 0.0,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #ensureVisible,
              [rect],
              {#duration: duration, #margin: margin},
            ),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i5.Matrix4 calcMatrixFor(
    _i4.Offset? position, {
    double? zoom,
    _i4.Size? viewSize,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #calcMatrixFor,
              [position],
              {#zoom: zoom, #viewSize: viewSize},
            ),
            returnValue: _FakeMatrix4_8(
              this,
              Invocation.method(
                #calcMatrixFor,
                [position],
                {#zoom: zoom, #viewSize: viewSize},
              ),
            ),
          )
          as _i5.Matrix4);

  @override
  _i5.Matrix4 calcMatrixForRect(
    _i4.Rect? rect, {
    double? zoomMax,
    double? margin,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #calcMatrixForRect,
              [rect],
              {#zoomMax: zoomMax, #margin: margin},
            ),
            returnValue: _FakeMatrix4_8(
              this,
              Invocation.method(
                #calcMatrixForRect,
                [rect],
                {#zoomMax: zoomMax, #margin: margin},
              ),
            ),
          )
          as _i5.Matrix4);

  @override
  _i5.Matrix4 calcMatrixToEnsureRectVisible(
    _i4.Rect? rect, {
    double? margin = 0.0,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #calcMatrixToEnsureRectVisible,
              [rect],
              {#margin: margin},
            ),
            returnValue: _FakeMatrix4_8(
              this,
              Invocation.method(
                #calcMatrixToEnsureRectVisible,
                [rect],
                {#margin: margin},
              ),
            ),
          )
          as _i5.Matrix4);

  @override
  _i2.PdfPageHitTestResult? getPdfPageHitTestResult(
    _i4.Offset? offset, {
    required bool? useDocumentLayoutCoordinates,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getPdfPageHitTestResult,
              [offset],
              {#useDocumentLayoutCoordinates: useDocumentLayoutCoordinates},
            ),
          )
          as _i2.PdfPageHitTestResult?);

  @override
  void setCurrentPageNumber(int? pageNumber) => super.noSuchMethod(
    Invocation.method(#setCurrentPageNumber, [pageNumber]),
    returnValueForMissingStub: null,
  );

  @override
  _i7.Future<void> setZoom(
    _i4.Offset? position,
    double? zoom, {
    Duration? duration = const Duration(milliseconds: 200),
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #setZoom,
              [position, zoom],
              {#duration: duration},
            ),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> zoomUp({
    bool? loop = false,
    _i4.Offset? zoomCenter,
    Duration? duration = const Duration(milliseconds: 200),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#zoomUp, [], {
              #loop: loop,
              #zoomCenter: zoomCenter,
              #duration: duration,
            }),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> zoomDown({
    bool? loop = false,
    _i4.Offset? zoomCenter,
    Duration? duration = const Duration(milliseconds: 200),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#zoomDown, [], {
              #loop: loop,
              #zoomCenter: zoomCenter,
              #duration: duration,
            }),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i4.Offset? globalToLocal(_i4.Offset? global) =>
      (super.noSuchMethod(Invocation.method(#globalToLocal, [global]))
          as _i4.Offset?);

  @override
  _i4.Offset? localToGlobal(_i4.Offset? local) =>
      (super.noSuchMethod(Invocation.method(#localToGlobal, [local]))
          as _i4.Offset?);

  @override
  _i4.Offset? globalToDocument(_i4.Offset? global) =>
      (super.noSuchMethod(Invocation.method(#globalToDocument, [global]))
          as _i4.Offset?);

  @override
  _i4.Offset? documentToGlobal(_i4.Offset? document) =>
      (super.noSuchMethod(Invocation.method(#documentToGlobal, [document]))
          as _i4.Offset?);

  @override
  void handlePointerSignalEvent(_i5.PointerSignalEvent? event) =>
      super.noSuchMethod(
        Invocation.method(#handlePointerSignalEvent, [event]),
        returnValueForMissingStub: null,
      );

  @override
  void invalidate() => super.noSuchMethod(
    Invocation.method(#invalidate, []),
    returnValueForMissingStub: null,
  );
}
